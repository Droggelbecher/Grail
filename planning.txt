
Extended Grammar for wrapper definitions (example):

Wrapper def code:
-------

class Game {
  void runChapter(int chapterNr);

  Viewport& getViewport();
  property viewport getViewport;
  //property viewport getViewport setViewport;

  void registerChapterConstructor(int, luaFunction);

  static Game& getInstance();
}

class UserInterface {
  UserInterface(string foo);
  overrideable int handleEvent(SDL_Event&, int foo = 0);
}

-------

class LuaOverrideable {
  std::map<string, Chunk*> overriddenMethods;
};

class _wrapped_UserInterface : public UserInterface, public LuaOverrideable {

  int handleEvent(SDL_Event& evt, int foo = 0) {
    // call lua implementation if it exists in wrapper table, else super function
  }
};

-------

Meta table for class:
  - holds wrapper method pointers
  - setting member is dumping the new value (which should be a lua function)
    and saving it
  - map get-operations to member functions
  - map set-operations to member functions
  - disallow all other member access

-------

UserInterface = {
  constructor = function ... end,
  handleEvent = function ... end,
  __index = function ... end,
  __newindex = function ... end,
}

ui = { _ptr = 0x12345678 }
setmetatable(ui, UserInterface)



